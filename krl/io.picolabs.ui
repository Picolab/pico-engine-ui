ruleset io.picolabs.ui {
  meta {
    shares __testing, saved_settings
  }
  global {
    __testing = { "queries": [ {"name": "saved_settings"} ],
                  "events": [  ] }
    saved_settings = function() {
      ent:settings.defaultsTo({})
    }

    format_settings_entry = function(picoID, DID, host, position) {
      {
        "picoID": picoID,
        "DID": DID,
        "host": host,
        "collapsed": true,
        "position": position || { "x": 0, "y": 0 },
        "tab": 0
      }
    }
  }//end global

  rule initialize {
    select when wrangler ruleset_added where event:attr("rids") >< meta:rid
    always{
      ent:settings{[meta:picoId]} := format_settings_entry(meta:picoId, meta:eci, meta:host) if (not ent:settings || not ent:settings{[meta:picoId]}) //this guard statement prevents overwriting the entry pico's setting variable being overwritten, and also prevents accidentally removing the entry pico from view
    }
  }

  rule addSettingsEntry {
    select when picolabs_ui new_settings_entry
    pre{
      picoID = event:attr("picoID");
      DID = event:attr("DID");
      host = event:attr("host");
      position = event:attr("position");
    }
    if picoID && DID && host then
      send_directive("adding pico " + picoID + " to settings")
    fired{
      ent:settings{[picoID]} := format_settings_entry(picoID, DID, host, position)
    }else{
      raise picolabs_ui event "failed_entry_addition"
        attributes event:attrs
    }
  }

  rule deleteSettingsEntry {
    select when picolabs_ui removed_settings_entry
    pre{
      picoID = event:attr("picoID");
    }
    if picoID && picoID != meta:picoId then //don't remove the entry pico from view...
      send_directive("deleting pico " + picoID + " from settings")
    fired{
      clear ent:settings{[picoID]}
    }else{
      raise picolabs_ui event "failed_entry_removal"
        attributes event:attrs
    }
  }

}//end ruleset
